name: Playwright CPA Funnel Tests with Rebrowser Stealth

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
  schedule:
    - cron: '0 */6 * * *'  # Run every 6 hours

jobs:
  playwright-test:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        echo "📦 Installing dependencies..."
        npm install
        echo "🎭 Installing standard Playwright with Chromium..."
        npx playwright install --with-deps chromium
        echo "🎭 Installing Rebrowser Playwright with Chromium..."
        npx rebrowser-playwright install --with-deps chromium
    
    - name: Validate required files
      run: |
        echo "🔍 Checking configuration files..."
        if [ ! -f "wfh_localjobmatcher.json" ]; then
          echo "❌ Config file not found!"
          exit 1
        fi
        echo "✅ Config file found"
        
        echo "🔍 Checking user data..."
        if [ ! -f "User-Data.csv" ]; then
          echo "❌ User data not found!"
          exit 1
        fi
        echo "✅ User data found"
        
        echo "🔍 Checking device profiles..."
        if ls *device-profiles*.csv* 1> /dev/null 2>&1; then
          echo "✅ Device profiles found"
        else
          echo "⚠️ No device profiles found (optional)"
        fi
    
    - name: Create test variants
      run: |
        echo "🔧 Creating test file variants..."
        
        # Create vanilla Playwright version
        cp test-funnel.js test-funnel-vanilla.js
        
        # Create rebrowser version
        cp test-funnel.js test-funnel-rebrowser.js
        sed -i "s/require('playwright')/require('rebrowser-playwright')/g" test-funnel-rebrowser.js
        
        echo "✅ Test variants created"
        
    - name: Run Vanilla Playwright Test
      env:
        BROWSER: chromium
        HEADLESS: true
        CI: true
        USE_DEFAULT_PROXY: true
        PROXY_SERVER: ${{ secrets.PROXY_SERVER || '38.134.148.20:8000' }}
        PROXY_USER: ${{ secrets.PROXY_USER || 'neon' }}
        PROXY_PASS: ${{ secrets.PROXY_PASS || 'neon' }}
      run: |
        echo "🧪 Starting VANILLA Playwright funnel test"
        echo "📱 Browser: Chromium (Standard)"
        echo "🌐 Proxy: Enabled"
        echo "🤖 Headless: true"
        echo "-----------------------------------"
        timeout 300 node test-funnel-vanilla.js || echo "Vanilla test completed or timed out"
        
        # Rename results file to identify variant
        if ls *test-results*.json 1> /dev/null 2>&1; then
          for file in *test-results*.json; do
            mv "$file" "vanilla-$file"
          done
        fi
        
        # Rename failure screenshots if any
        if ls failure-*.png 1> /dev/null 2>&1; then
          for file in failure-*.png; do
            mv "$file" "vanilla-$file"
          done
        fi

    - name: Run Rebrowser Playwright Test
      env:
        BROWSER: chromium
        HEADLESS: true
        CI: true
        USE_DEFAULT_PROXY: true
        PROXY_SERVER: ${{ secrets.PROXY_SERVER || '38.134.148.20:8000' }}
        PROXY_USER: ${{ secrets.PROXY_USER || 'neon' }}
        PROXY_PASS: ${{ secrets.PROXY_PASS || 'neon' }}
      run: |
        echo "🧪 Starting REBROWSER Playwright funnel test"
        echo "📱 Browser: Chromium (Rebrowser Stealth)"
        echo "🌐 Proxy: Enabled"
        echo "🤖 Headless: true"
        echo "🛡️ Stealth: rebrowser-patches"
        echo "-----------------------------------"
        timeout 300 node test-funnel-rebrowser.js || echo "Rebrowser test completed or timed out"
        
        # Rename results file to identify variant
        if ls *test-results*.json 1> /dev/null 2>&1; then
          for file in *test-results*.json; do
            mv "$file" "rebrowser-$file"
          done
        fi
        
        # Rename failure screenshots if any
        if ls failure-*.png 1> /dev/null 2>&1; then
          for file in failure-*.png; do
            mv "$file" "rebrowser-$file"
          done
        fi

    - name: Generate comparative test summary
      if: always()
      run: |
        echo "## 📊 Fraud Detection Test Summary" > summary.md
        echo "**Framework:** Playwright (Standard vs Rebrowser)" >> summary.md
        echo "**Browser:** Chromium" >> summary.md
        echo "**Run:** #${{ github.run_number }}" >> summary.md
        echo "**Date:** $(date)" >> summary.md
        echo "" >> summary.md
        
        # Analyze vanilla results
        echo "### Standard Playwright Results" >> summary.md
        if ls vanilla-*test-results*.json 1> /dev/null 2>&1; then
          for file in vanilla-*test-results*.json; do
            success=$(grep -o '"success":[^,}]*' "$file" | head -1 | cut -d':' -f2 | tr -d ' ')
            if [ "$success" = "true" ]; then
              echo "**Status:** ✅ Success" >> summary.md
            else
              echo "**Status:** ❌ Failed" >> summary.md
            fi
            
            # Extract page results count
            pages=$(grep -o '"pageResults":\[[^]]*\]' "$file" | grep -o '{"pageNumber"' | wc -l)
            echo "**Pages Processed:** $pages" >> summary.md
          done
        else
          echo "**Status:** ❌ No results file generated" >> summary.md
        fi
        echo "" >> summary.md
        
        # Analyze rebrowser results
        echo "### Rebrowser Playwright Results" >> summary.md
        if ls rebrowser-*test-results*.json 1> /dev/null 2>&1; then
          for file in rebrowser-*test-results*.json; do
            success=$(grep -o '"success":[^,}]*' "$file" | head -1 | cut -d':' -f2 | tr -d ' ')
            if [ "$success" = "true" ]; then
              echo "**Status:** ✅ Success" >> summary.md
            else
              echo "**Status:** ❌ Failed" >> summary.md
            fi
            
            # Extract page results count
            pages=$(grep -o '"pageResults":\[[^]]*\]' "$file" | grep -o '{"pageNumber"' | wc -l)
            echo "**Pages Processed:** $pages" >> summary.md
            
            # Extract device info
            device=$(grep -o '"deviceProfile":"[^"]*"' "$file" | cut -d'"' -f4)
            if [ ! -z "$device" ]; then
              echo "**Device Profile:** $device" >> summary.md
            fi
          done
        else
          echo "**Status:** ❌ No results file generated" >> summary.md
        fi
        echo "" >> summary.md
        
        # Count failure screenshots
        vanilla_screenshots=$(ls vanilla-failure-*.png 2>/dev/null | wc -l)
        rebrowser_screenshots=$(ls rebrowser-failure-*.png 2>/dev/null | wc -l)
        
        echo "### Detection Analysis" >> summary.md
        echo "**Vanilla Screenshots:** $vanilla_screenshots" >> summary.md
        echo "**Rebrowser Screenshots:** $rebrowser_screenshots" >> summary.md
        
        if [ $vanilla_screenshots -gt $rebrowser_screenshots ]; then
          echo "**Analysis:** 🛡️ Rebrowser stealth appears more effective" >> summary.md
        elif [ $rebrowser_screenshots -gt $vanilla_screenshots ]; then
          echo "**Analysis:** ⚠️ Platform may detect rebrowser patterns" >> summary.md
        else
          echo "**Analysis:** ➡️ Similar detection rates - may need advanced techniques" >> summary.md
        fi
        
        cat summary.md

    - name: Upload comparative test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: playwright-stealth-comparison-${{ github.run_number }}
        path: |
          vanilla-*test-results*.json
          rebrowser-*test-results*.json
          vanilla-failure-*.png
          rebrowser-failure-*.png
          summary.md
          test-funnel-vanilla.js
          test-funnel-rebrowser.js
        retention-days: 30
