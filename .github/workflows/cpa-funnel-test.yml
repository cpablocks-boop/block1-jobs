name: CPA Funnel Automation Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]
  workflow_dispatch:
    inputs:
      template:
        description: 'Template to test'
        required: false
        default: 'wfh_localjobmatcher.json'
        type: choice
        options:
        - 'wfh_localjobmatcher.json'
        - 'android_mystery_sample_box.json'
        - 'android_survival_kit.json'
        - 'android_walmart_gift_card.json'
        - 'desktop_walmart_gift_card.json'
      browsers:
        description: 'Browsers to test (comma-separated)'
        required: false
        default: 'chromium,firefox,webkit'
  schedule:
    - cron: '0 6 * * *'

jobs:
  prepare-matrix:
    runs-on: ubuntu-latest
    outputs:
      browsers: ${{ steps.set-matrix.outputs.browsers }}
      template: ${{ steps.set-matrix.outputs.template }}
    steps:
    - name: Set matrix values
      id: set-matrix
      run: |
        # Handle browsers input
        browsers_input="${{ github.event.inputs.browsers || 'chromium,firefox,webkit' }}"
        # Convert comma-separated string to JSON array
        browsers_json=$(echo "$browsers_input" | jq -R 'split(",")')
        echo "browsers=$browsers_json" >> $GITHUB_OUTPUT
        
        # Handle template input
        template_input="${{ github.event.inputs.template || 'wfh_localjobmatcher.json' }}"
        template_json=$(echo "[$template_input]" | jq -c '.')
        echo "template=$template_json" >> $GITHUB_OUTPUT

  funnel-test:
    runs-on: ubuntu-latest
    needs: prepare-matrix
    
    strategy:
      matrix:
        browser: ${{ fromJson(needs.prepare-matrix.outputs.browsers) }}
        template: ${{ fromJson(needs.prepare-matrix.outputs.template) }}
      fail-fast: false
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    
    - name: Install dependencies
      run: |
        npm install
        npx playwright install --with-deps ${{ matrix.browser }}
    
    - name: Validate config and device profile files
      run: |
        echo "🔍 Checking for configuration files..."
        if [ ! -f "${{ matrix.template }}" ]; then
          echo "❌ Config file ${{ matrix.template }} not found!"
          exit 1
        fi
        echo "✅ Config file found: ${{ matrix.template }}"
        node -e "JSON.parse(require('fs').readFileSync('${{ matrix.template }}'))" && echo "✅ Valid JSON"
        
        echo "🔍 Checking for device profile files..."
        if [ -f "android-device-profiles.csv" ]; then
          echo "✅ Android device profiles found"
        fi
        if [ -f "iphone-device-profiles.csv" ]; then
          echo "✅ iPhone device profiles found"
        fi
        
        echo "📁 Available files:"
        ls -la *.csv *.json 2>/dev/null || echo "No CSV/JSON files found"
    
    - name: Run CPA Funnel Tests with Proxy
      env:
        BROWSER: ${{ matrix.browser }}
        TEMPLATE: ${{ matrix.template }}
        HEADLESS: true
        CI: true
        USE_DEFAULT_PROXY: true
      run: |
        echo "🧪 Starting funnel test with ${{ matrix.browser }} using template ${{ matrix.template }}"
        timeout 300 node test-funnel.js "${{ matrix.template }}" || echo "Test timed out after 5 minutes"
    
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.browser }}-${{ matrix.template }}-${{ github.run_number }}
        path: |
          *test-results*.json
          failure-*.png
          videos/
        retention-days: 30
    
    - name: Upload screenshots on failure
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: failure-screenshots-${{ matrix.browser }}-${{ matrix.template }}-${{ github.run_number }}
        path: failure-*.png
        retention-days: 7

  aggregate-results:
    runs-on: ubuntu-latest
    needs: funnel-test
    if: always()
    
    steps:
    - name: Download all test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
    
    - name: Generate summary report
      run: |
        echo "# 📊 CPA Funnel Test Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Template | Browser | Status | Duration | Success Rate | Proxy |" >> $GITHUB_STEP_SUMMARY
        echo "|----------|---------|--------|----------|--------------|-------|" >> $GITHUB_STEP_SUMMARY
        
        for file in *test-results*.json; do
          if [ -f "$file" ]; then
            template=$(echo "$file" | sed 's/.*-\([^-]*\.json\)-[0-9]*.json/\1/' || echo "unknown")
            browser=$(echo "$file" | grep -o 'chromium\|firefox\|webkit' || echo "unknown")
            status=$(jq -r '.success' "$file" 2>/dev/null || echo "false")
            duration=$(jq -r '.totalDuration' "$file" 2>/dev/null || echo "0")
            success_count=$(jq -r '.pageResults | map(select(.success)) | length' "$file" 2>/dev/null || echo "0")
            total_count=$(jq -r '.pageResults | length' "$file" 2>/dev/null || echo "0")
            proxy=$(jq -r '.proxy' "$file" 2>/dev/null || echo "disabled")
            
            status_emoji=$([ "$status" = "true" ] && echo "✅" || echo "❌")
            duration_sec=$((duration / 1000))
            
            echo "| $template | $browser | $status_emoji | ${duration_sec}s | $success_count/$total_count | $proxy |" >> $GITHUB_STEP_SUMMARY
          fi
        done
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Test completed at:** $(date)" >> $GITHUB_STEP_SUMMARY
